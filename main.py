import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from aiogram import F
from reminder_handler import ReminderHandler

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Get bot token from environment variable
BOT_TOKEN = os.getenv("BOT_TOKEN", "YOUR_BOT_TOKEN_HERE")

# Initialize bot and dispatcher
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# Initialize reminder handler
reminder_handler = ReminderHandler(bot)

@dp.message(Command("start"))
async def start_command(message: Message):
    """Handle /start command"""
    welcome_text = """
ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ë–æ—Ç –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π!**

üìã **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç:**
‚Ä¢ –í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –º–Ω–µ –≤—Ä–µ–º—è –∏ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
‚Ä¢ –Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∞–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è

üîß **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/remind 22:30 –ù–µ –∑–∞–±—ã—Ç—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É` - –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
‚Ä¢ `/list` - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
‚Ä¢ `/cancel` - —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–ø–æ ID)

‚è∞ **–§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏:** –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:30, 09:15)

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/remind` –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!
    """
    await message.reply(welcome_text, parse_mode="Markdown")

@dp.message(Command("remind"))
async def remind_command(message: Message):
    """Handle /remind command"""
    try:
        # Parse the command: /remind HH:MM reminder_text
        command_parts = message.text.split(' ', 2)
        
        if len(command_parts) < 3:
            await message.reply(
                "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!**\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/remind 22:30 –¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è`",
                parse_mode="Markdown"
            )
            return
        
        time_str = command_parts[1]
        reminder_text = command_parts[2]
        
        # Validate time format
        if not reminder_handler.validate_time_format(time_str):
            await message.reply(
                "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!**\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 09:30, 14:15, 22:00)",
                parse_mode="Markdown"
            )
            return
        
        # Add reminder
        reminder_id = await reminder_handler.add_reminder(
            user_id=message.from_user.id,
            time_str=time_str,
            reminder_text=reminder_text
        )
        
        await message.reply(
            f"‚úÖ **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!**\n"
            f"üÜî ID: `{reminder_id}`\n"
            f"‚è∞ –í—Ä–µ–º—è: `{time_str}`\n"
            f"üìù {reminder_text}",
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error in remind_command: {e}")
        await message.answer(
            "‚ùå **–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!**\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )

@dp.message(Command("list"))
async def list_command(message: Message):
    """Handle /list command"""
    try:
        reminders = await reminder_handler.get_user_reminders(message.from_user.id)
        
        if not reminders:
            await message.answer(
                "üì≠ **–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.**\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/remind` –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."
            )
            return
        
        reminder_list = "üìã **–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:**\n\n"
        
        for reminder in reminders:
            reminder_list += (
                f"üÜî ID: `{reminder['id']}`\n"
                f"‚è∞ –í—Ä–µ–º—è: `{reminder['time']}`\n"
                f"üìù –¢–µ–∫—Å—Ç: {reminder['text']}\n"
                f"üìÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {reminder['created_at']}\n"
                f"{'‚îÄ' * 30}\n"
            )
        
        reminder_list += f"\nüí° –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: `/cancel ID`"
        
        await message.reply(reminder_list, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"Error in list_command: {e}")
        await message.answer(
            "‚ùå **–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!**\n\n"
            "–ü—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."
        )

@dp.message(Command("cancel"))
async def cancel_command(message: Message):
    """Handle /cancel command"""
    try:
        command_parts = message.text.split()
        
        if len(command_parts) != 2:
            await message.answer(
                "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!**\n\n"
                "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: `/cancel ID`\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: `/cancel 123`\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/list` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."
            )
            return
        
        try:
            reminder_id = int(command_parts[1])
        except ValueError:
            await message.answer(
                "‚ùå **ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!**\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: `/cancel 123`"
            )
            return
        
        success = await reminder_handler.cancel_reminder(
            user_id=message.from_user.id,
            reminder_id=reminder_id
        )
        
        if success:
            await message.reply(
                f"‚úÖ **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!**\n"
                f"üÜî ID: `{reminder_id}`",
                parse_mode="Markdown"
            )
        else:
            await message.reply(
                f"‚ùå **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!**\n"
                f"ID `{reminder_id}` –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/list`",
                parse_mode="Markdown"
            )
            
    except Exception as e:
        logger.error(f"Error in cancel_command: {e}")
        await message.answer(
            "‚ùå **–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!**\n\n"
            "–ü—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."
        )

@dp.message()
async def handle_other_messages(message: Message):
    """Handle all other messages"""
    await message.reply(
        "ü§î **–ù–µ –ø–æ–Ω–∏–º–∞—é...**\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ `/start` - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n"
        "‚Ä¢ `/remind 22:30 —Ç–µ–∫—Å—Ç` - –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
        "‚Ä¢ `/list` - —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
        "‚Ä¢ `/cancel ID` - —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
    )

async def main():
    """Main function to run the bot"""
    try:
        logger.info("Bot ishga tushmoqda...")
        
        # Start the reminder checker task
        asyncio.create_task(reminder_handler.start_reminder_checker())
        
        # Start polling
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error(f"Bot ishga tushishda xatolik: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
